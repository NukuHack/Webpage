{
  "data": [
    {
      "id": 0,
      "lang": "javascript",
      "desc": "Fetch an external json",
      "code": "function fetchData() {\n  fetch('./json/data.json')\n  .then((res) => {\n\tif (!res.ok) {\n\tthrow new Error\n\t  (`HTTP error status: ${res.status}`);\n\t}\n  return res.json();\n  })\n  .then((hElpEr) => {\n\tData = hElpEr.data;\n\t//console.log(Data);\n  })\n  .catch((error) =>{\n\tconsole.error('Json load error:', error)\n  });\n}"
    },
    {
      "id": 1,
      "lang": "csharp",
      "desc": "Read an external file",
      "code": "private string[,] Data;\nprivate int len;\nprivate int wid;\n\nprivate void Read_file() {\n  string filePlace = \"hid.csv\"; // the file to read\n  string cut = \";\"; // the char used in splitting\n\n  string[] adat = File.ReadAllLines(filePlace);\n  len = adat.Length; // the length\n  wid = adat[0].Split(cut).Length; // the width\n  Data = new string[len, wid]; // len*wid=matrix\n  StreamReader fireReader = new StreamReader(filePlace);\n  int n = 0;\n  while (!fireReader.EndOfStream) {\n    string[]line = fireReader.ReadLine().Split(cut);\n    for (int i = 0; i < wid; i++)\n      Data[n, i] =line[i];\n      n++;\n  }\n  fireReader.Close();\n}"
    },
    {
      "id": 2,
      "lang": "css",
      "desc": "A basic animation (a bouncing ball)",
      "code": ".ball {\n  width: 50px;\n  height: 50px;\n  background-color: red;\n  border-radius: 50%;\n  position: fixed;\n  top: 0;\n  left: 50%;\n  transform: translateX(-50%);\n  animation: bounce 2s infinite;\n}\n\n@keyframes bounce {\n  0%, 100% { top: 100px; }\n  50% { top: 500px; }\n}"
    },
    {
      "id": 3,
      "lang": "none",
      "desc": "none",
      "code": "none"
    },
    {
      "id": 4,
      "lang": "none",
      "desc": "none",
      "code": "none"
    }
  ]
}